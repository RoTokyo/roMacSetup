#!/usr/bin/env bash

# **********************************
# *                                *
# *   Prepare image files for web  *
# *                                *
#***********************************
#
# convert octocat.png   -background 'rgb(230, 46, 104)' -alpha background -flatten  png_sma.jpg


ORIGINIMGPATH="${HOME}/Desktop/a"
DESTINIMGPATH="${HOME}/Desktop/b"

function _jpg_minimize () {
  unset REPLY TITLE
  seek_confirmation "Insert jpg file name ... without extention ... :  "
  if is_confirmed
    then

			seek_for_title "Insert image title ... :   "

      convert \
	    ${ORIGINIMGPATH}/${REPLY}.jpg \
	    -density 72 \
	    -quality 85 \
	    -define jpeg:fancy-upsampling=off \
	    -unsharp 0.25x0.25+8+0.065 \
	    -dither None \
	    -interlace none \
	    -colorspace sRGB \
	    -strip \
	    ${DESTINIMGPATH}/${REPLY}.jpg

		_add_copyrights

  fi
  read -p "$(_f_alert_success 'Press any button to EXIT ⧳ ')" -n 1
}

function _roTokyo_image () {
  unset REPLY SCALA TITLE
  seek_confirmation "Insert jpg file name ... without extention ... :  "
  if is_confirmed
    then
      if [[ $(identify -ping -format '%w' ${ORIGINIMGPATH}/${REPLY}.jpg) -ge '1200' ]]; then
				
				seek_for_title "Insert image title ... :   " 

				_convert; 	_f_alert_info "File $REPLY.jpg creato.";
			  _convert_thumb;           _f_alert_info "File $REPLY-thumb.jpg creato."
	  	  _convert_blur; 	          _f_alert_info "File $REPLY-blur.jpg creato."
	  	
			else
	  	  _f_alert_warning "Image file too small!"
	  	fi
  fi
	unset TITLE
  read -p "$(_f_alert_success 'Press any button to EXIT ⧳ ')" -n 1
}

function _blur_image () {
  unset REPLY TITLE
  seek_confirmation "Insert jpg file name ... without extention ... :  "
  if is_confirmed
    then
      if [[ $(identify -ping -format '%w' ${ORIGINIMGPATH}/${REPLY}.jpg) -ge '24' ]]; then
	  	  _convert_blur; 	_f_alert_info "File $REPLY-blur.jpg creato."
	  	else
	  	  _f_alert_warning "Image file too small!"
	  	fi
  fi
  read -p "$(_f_alert_success 'Press any button to EXIT ⧳ ')" -n 1
}

function _responsive_image () {
  unset REPLY SCALA TITLE
  seek_confirmation "Insert jpg file name ... without extention ... :  "
  if is_confirmed
    then
      if [[ $(identify -ping -format '%w' ${ORIGINIMGPATH}/${REPLY}.jpg) -ge '1920' ]]; then

				seek_for_title "Insert image title ... :  "
				array=("1920" "1600" "1440" "1200" "1024" "768" "640")

				for SCALA in "${array[@]}"
					do
						_convert
						_f_alert_info "File $REPLY-$SCALA.jpg creato."
					done

				_convert_thumb; 	_f_alert_info "File $REPLY-thumb.jpg creato."
				_convert_blur;  	_f_alert_info "File $REPLY-blur.jpg creato."

	  	fi
  fi
	read -p "$(_f_alert_success 'Press any button to EXIT ⧳ ')" -n 1

}

function _resize_image () {
  unset REPLY
  seek_confirmation "Insert jpg file name ... without extention ... :  "
  if is_confirmed
    then
      read -p "$(_f_alert_input "Insert size:")" RESIZE
      if [[ $(identify -ping -format '%w' ${ORIGINIMGPATH}/${REPLY}.jpg) -ge ${RESIZE} ]]; then
        convert \
        ${ORIGINIMGPATH}/${REPLY}.jpg \
        -scale ${RESIZE} \
        ${DESTINIMGPATH}/${REPLY}-${RESIZE}.jpg
        _f_alert_info "File $REPLY-$RESIZE.jpg creato."
        read -p "$(_f_alert_success 'Press any button to EXIT ⧳ ')" -n 1
	  	else
	  	  _f_alert_warning "Image file too small!"
      fi
  fi
}

function _convert () {
	FILE_SUFF="-$SCALA"

  if [[ "${SCALA}" == "" ]]; then
    SCALA="1200"
		FILE_SUFF=""
  fi

  convert \
	${ORIGINIMGPATH}/${REPLY}.jpg \
	-density 72 \
	-scale ${SCALA} \
	-quality 85 \
	-define jpeg:fancy-upsampling=off \
	-unsharp 0.25x0.25+8+0.065 \
	-dither None \
	-interlace none \
	-colorspace sRGB \
	-strip \
	${DESTINIMGPATH}/${REPLY}${FILE_SUFF}.jpg

	_add_copyrights "$FILE_SUFF"

}

function _convert_1200 () {
  convert \
	${ORIGINIMGPATH}/${REPLY}.jpg \
	-density 72 \
	-scale 1200 \
	-quality 85 \
	-define jpeg:fancy-upsampling=off \
	-unsharp 0.25x0.25+8+0.065 \
	-dither None \
	-interlace none \
	-colorspace sRGB \
	-strip \
	${DESTINIMGPATH}/${REPLY}${FILE_SUFF}.jpg

	_add_copyrights "$FILE_SUFF"

}


function _convert_thumb () {
  convert \
  ${ORIGINIMGPATH}/${REPLY}.jpg \
	-thumbnail 420x280 \
	-unsharp 0.25x0.25+8+0.065 \
	-dither None \
	-posterize 136 \
	-define jpeg:fancy-upsampling=off \
	-interlace none \
	-colorspace sRGB \
	-strip \
	${DESTINIMGPATH}/${REPLY}-thumb.jpg
}

function _convert_blur () {
  convert \
	${ORIGINIMGPATH}/${REPLY}.jpg \
	-thumbnail 24x16 \
	-filter Gaussian \
	-blur 0x8 \
	-strip \
	${DESTINIMGPATH}/${REPLY}-blur.jpg
}

function _add_copyrights () {

	exiftool \
		-PhotoTitle="${TITLE}" \
		-Creator="Roberto Calesini" \
		-Rights="© 2013 Roberto Calesini. All rights reserved." \
		-Artist="roTokyo" \
		-ArtistCity="Tokyo" \
		-ArtistCountry="Japan" \
		-ArtistWorkURL="https://www.flickr.com/photos/rotokyo/albums" \
		-ArtistWorkEmail="rotokyo@icloud.com" \
		-CopyrightsOwner="© 2013 Roberto Calesini aka roTokyo" \
		-UsageTermsStatement="For evaluation only, no reproduction is permitted without written permission by copyrights owner." \
		-CopyrightFlag=true \
		${DESTINIMGPATH}/${REPLY}${FILE_SUFF}.jpg
	
	unset FILE_SUFF

}

function seek_for_title() {
  read -p "$(_f_alert_input "$@")" TITLE
  echo ''
}

function seek_confirmation() {
  read -p "$(_f_alert_input "$@")" REPLY
  echo ''
}

function is_confirmed() {
  if [[ "${REPLY}" != "" && -f "${ORIGINIMGPATH}/${REPLY}.jpg" ]]; then
    return 0
  fi
  _f_alert_warning "Enter a valid file name!"
  return 1
}

_alert() {

  ORANGE=$(tput setaf 166)
	RED=$(tput setaf 1)
	RESET=$(tput sgr0)
	TAN=$(tput setaf 3)

	if [[ "${1}" = "info" || "${1}" = "notice" ]];    then local COLOR=""; fi
	if [[ "${1}" = "input" ]];   then local COLOR="${RED}"; fi
	if [[ "${1}" = "success" ]]; then local COLOR="${TAN}"; fi
	if [[ "${1}" = "warning" ]]; then local COLOR="${RED}"; fi
	if [[ "${1}" = "menu" ]];    then local COLOR="${ORANGE}"; fi

	echo -e "${COLOR}$(printf "[%9s]" "${1}") ${MESSAGE}${RESET}"
}


_f_alert_info ()      { local MESSAGE="${*}"; echo "$(_alert info)"; }
_f_alert_input ()     { local MESSAGE="${*}"; echo "$(_alert input)"; }
_f_alert_notice ()    { local MESSAGE="${*}"; echo "$(_alert notice)"; }
_f_alert_menu()       { local MESSAGE="${*}"; echo "$(_alert menu)"; }
_f_alert_success ()   { local MESSAGE="${*}"; echo "$(_alert success)"; }
_f_alert_warning ()   { local MESSAGE="${*}"; echo "$(_alert warning)"; }

_byby() {
  cat <<_EOF_

[     exit]

_EOF_
	read -p "$(_f_alert_input 'Press any button to EXIT ⧳ ')" -n 1
	unset ORIGIN DESTINATION BASHFILES GITFILES VIMFILES OTHERFILES
	clear
	exit
}

_menu () {

	local readonly DELAY=2

	while [[ $REPLY != x ]]; do
		clear && echo ''
  	cat <<_EOF_
  Image manipulation menu:

    0. minimize jpg

    1. roTokyo image manipulation routine
    2. blur image for web site
    3. responsive images for web site

    5. resize images

    x. eXit

_EOF_
  	read -p "Enter selection [ExIT or 0-3] > "
  	if [[ $REPLY =~ ^[0-9]$ || $REPLY =~ ^[?]$  || $REPLY =~ ^[x]$ ]]; then

    	if [[ ${REPLY} == x ]]; then
        echo ''; _f_alert_menu '  eXit Installation Routine! Wait ...'; echo ''
      	sleep ${DELAY}
				clear
    	fi

     	if [[ ${REPLY} == 0 ]]; then
        echo ''; _f_alert_menu '  0. minimize jpg ...'; echo ''
        _jpg_minimize
    	fi

    	if [[ ${REPLY} == 1 ]]; then
        clear
      	echo '';  _f_alert_menu '  1. roTokyo image manipulation routine '; echo ''
        _roTokyo_image
    	fi

    	if [[ ${REPLY} == 2 ]]; then
        clear
      	echo '';  _f_alert_menu '  2. blur image for web site '; echo ''
        _blur_image
    	fi
    	if [[ ${REPLY} == 3 ]]; then
        clear
      	echo '';  _f_alert_menu '  3. responsive images for web site '; echo ''
        _responsive_image
    	fi

    	if [[ ${REPLY} == 5 ]]; then
        clear
      	echo '';  _f_alert_menu '  5. resize images '; echo ''
        _resize_image
    	fi

    	else
        _f_alert_warning '  Invalid entry! Wait ...'
      	sleep ${DELAY}
  	fi
	done
  unset DELAY REPLY
}

_menu
_byby


